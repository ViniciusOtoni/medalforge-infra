name: seed-scim-token

on:
  workflow_dispatch: {}

permissions:
  contents: read
  id-token: write
  actions: read

env:
  KV_NAME: akv-medalforge-rbac-core

jobs:
  seed:
    runs-on: ubuntu-latest
    steps:
      # 0) Login como SPN bootstrap
      - name: Azure login (bootstrap)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 1) Validar e mascarar os GitHub Secrets
      - name: Validate & mask secrets
        run: |
          set -euo pipefail
          if [ -z "${{ secrets.DBX_ACCOUNT_SCIM_TOKEN }}" ]; then
            echo "ERRO: defina o secret DBX_ACCOUNT_SCIM_TOKEN no repositório."; exit 1
          fi
          echo "::add-mask::${{ secrets.DBX_ACCOUNT_SCIM_TOKEN }}"
          if [ -n "${{ secrets.DBX_ACCOUNT_SCIM_URL }}" ]; then
            echo "::add-mask::${{ secrets.DBX_ACCOUNT_SCIM_URL }}"
          fi

      # 2) Garantir que o Key Vault existe
      - name: Ensure Key Vault exists
        run: |
          set -euo pipefail
          az keyvault show --name "${{ env.KV_NAME }}" --query id -o tsv >/dev/null

      # 3) Gravar/rotacionar secrets no KV (idempotente)
      - name: Write SCIM secrets to Key Vault
        run: |
          set -euo pipefail
          KV="${{ env.KV_NAME }}"
          ROTATE="${{ github.event.inputs.rotate || 'false' }}"
          TOKEN="${{ secrets.DBX_ACCOUNT_SCIM_TOKEN }}"
          URL="${{ secrets.DBX_ACCOUNT_SCIM_URL }}"

          seed() {
            local name="$1"
            local value="$2"
            local desc="$3"

            if [ -z "$value" ]; then
              echo ">> $name vazio; pulando."
              return
            fi

            if az keyvault secret show --vault-name "$KV" --name "$name" --query id -o tsv >/dev/null 2>&1; then
              if [ "$ROTATE" = "true" ]; then
                az keyvault secret set --vault-name "$KV" --name "$name" --value "$value" --description "$desc (rotated)"
                echo ">> $name atualizado no KV."
              else
                echo ">> $name já existe. Use rotate=true para sobrescrever."
              fi
            else
              az keyvault secret set --vault-name "$KV" --name "$name" --value "$value" --description "$desc"
              echo ">> $name criado no KV."
            fi
          }

          # nunca loga valores; apenas registra ação
          echo "::add-mask::$TOKEN"
          [ -n "$URL" ] && echo "::add-mask::$URL"

          seed "dbx-account-scim-token" "$TOKEN" "Databricks Account SCIM token (seeded via GH Actions)"
          seed "dbx-account-scim-url"   "$URL"   "Databricks Account SCIM Base URL (seeded via GH Actions)"

      # 4) Verificação final (opcional – não exibe valores)
      - name: Post-check
        run: |
          set -euo pipefail
          KV="${{ env.KV_NAME }}"
          az keyvault secret show --vault-name "$KV" --name dbx-account-scim-token --query "id" -o tsv
          az keyvault secret show --vault-name "$KV" --name dbx-account-scim-url   --query "id" -o tsv || echo "SCIM URL não definida (ok se opcional)."
