name: landing-zone

on:
  workflow_call:
    secrets:
      ARM_SUBSCRIPTION_ID: { required: true }
      ARM_TENANT_ID:       { required: true }
      ARM_CLIENT_ID:       { required: true }
      ARM_CLIENT_SECRET:   { required: true }
      AZURE_CREDENTIALS:   { required: true }
    outputs:
      state_rg_name:
        description: "RG do backend remoto"
        value: ${{ jobs.lz.outputs.state_rg_name }}
      state_sa_name:
        description: "SA do backend remoto"
        value: ${{ jobs.lz.outputs.state_sa_name }}
      state_container:
        description: "Container do backend remoto (tfstate)"
        value: ${{ jobs.lz.outputs.state_container }}

permissions:
  contents: read
  id-token: write
  actions: write

jobs:
  lz:
    name: landing-zone
    runs-on: ubuntu-latest
    outputs:
      state_rg_name: ${{ steps.tfout.outputs.rg }}
      state_sa_name: ${{ steps.tfout.outputs.sa }}
      state_container: tfstate
    env:
      TF_VAR_subscription_id:     ${{ secrets.ARM_SUBSCRIPTION_ID }}
      TF_VAR_tenant_id:           ${{ secrets.ARM_TENANT_ID }}
      TF_VAR_admin_client_id:     ${{ secrets.ARM_CLIENT_ID }}
      TF_VAR_admin_client_secret: ${{ secrets.ARM_CLIENT_SECRET }}
      SA_NAME: stmedalforgestate
      RG_NAME: rg-medalforge-core

    steps:
      - uses: actions/checkout@v4
        with:
          repository: ViniciusOtoni/sunny-data
          ref: main

      # baixa o tfstate do core-identity GERADO neste mesmo run (artifact local ao caller)
      - name: Download core-identity tfstate
        uses: actions/download-artifact@v4
        with:
          name: tfstate-core
          path: core-identity   # ficará em core-identity/terraform.tfstate

      - name: Azure Login (bootstrap)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      # 1) Bootstrapping: backend LOCAL para criar SA do state
      - name: Switch backend to local temporarily
        run: |
          mv landing-zone/backend.tf landing-zone/backend_remote.bak || true
          cat <<'EOF' > landing-zone/backend.tf
          terraform { 
            backend "local" {} 
          }
          EOF

      - name: Terraform init (local)
        run: terraform -chdir=landing-zone init

      - name: Terraform apply (create SA)
        run: terraform -chdir=landing-zone apply -auto-approve

      # captura SA/RG e access key
      - name: Capture outputs
        id: tfout
        run: |
          SA=$(terraform -chdir=landing-zone output -raw state_sa_name)
          RG=$(terraform -chdir=landing-zone output -raw state_rg_name)
          ACCESS_KEY=$(az storage account keys list \
                        --account-name "$SA" \
                        --resource-group "$RG" \
                        --query "[0].value" -o tsv)
          echo "::add-mask::$ACCESS_KEY"
          echo "sa=$SA"     >> $GITHUB_OUTPUT
          echo "rg=$RG"     >> $GITHUB_OUTPUT
          echo "ackey=$ACCESS_KEY" >> $GITHUB_OUTPUT

      # 2) Migração: landing-zone -> backend azurerm
      - name: Restore azurerm backend file
        run: |
          mv landing-zone/backend_remote.bak landing-zone/backend.tf || true

      - name: Migrate landing-zone state to azurerm
        env:
          ARM_ACCESS_KEY: ${{ steps.tfout.outputs.ackey }}
        run: |
          terraform -chdir=landing-zone init \
            -backend-config="resource_group_name=${{ steps.tfout.outputs.rg }}" \
            -backend-config="storage_account_name=${{ steps.tfout.outputs.sa }}" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=landing.tfstate" \
            -migrate-state -force-copy

      # 3) Migração: core-identity -> backend azurerm (reutiliza tfstate-core baixado)
      - name: Migrate core-identity state to azurerm
        env:
          ARM_ACCESS_KEY: ${{ steps.tfout.outputs.ackey }}
        run: |
          cd core-identity
          # troca o backend de local -> azurerm para migrar
          cat <<'EOF' > backend.tf
          terraform { 
            backend "azurerm" {} 
          }
          EOF
          terraform init \
            -backend-config="resource_group_name=${{ steps.tfout.outputs.rg }}" \
            -backend-config="storage_account_name=${{ steps.tfout.outputs.sa }}" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=core.tfstate" \
            -migrate-state -force-copy
