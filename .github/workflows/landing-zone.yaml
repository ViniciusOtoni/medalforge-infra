name: landing-zone
on:
  workflow_run:
    workflows: ["core-identity"]
    types: [completed]
  workflow_dispatch: {}

permissions:
  contents: read
  id-token: write
  actions: write

jobs:
  landing-zone:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    env:
      TF_VAR_subscription_id:     ${{ secrets.ARM_SUBSCRIPTION_ID }}
      TF_VAR_tenant_id:           ${{ secrets.ARM_TENANT_ID }}
      TF_VAR_admin_client_id:     ${{ secrets.ARM_CLIENT_ID }}
      TF_VAR_admin_client_secret: ${{ secrets.ARM_CLIENT_SECRET }}
      SA_NAME: stmedalforgestate
      RG_NAME: rg-medalforge-core

    steps:
      - uses: actions/checkout@v4

      # baixa o tfstate do core 
      - name: Download core-identity tfstate 
        uses: dawidd6/action-download-artifact@v3
        with:
          workflow: core-identity
          run_id:  ${{ github.event.workflow_run.id }}
          name: tfstate-core
          path: core-identity
        continue-on-error: true

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      # 1) Bootstrapping – força backend LOCAL no landing-zone
      - name: Switch backend to local (landing-zone)
        run: |
          if [ -f landing-zone/backend.tf ]; then mv landing-zone/backend.tf landing-zone/backend_remote.bak; fi
          printf 'terraform {\n  backend "local" {}\n}\n' > landing-zone/backend.tf

      - name: Terraform init (local)
        run: terraform -chdir=landing-zone init

      - name: Terraform apply (create SA + container + roles)
        run: terraform -chdir=landing-zone apply -auto-approve

      # pega a access key do SA p/ reconfigurar backend azurerm
      - name: Capture Storage Account key
        id: sa
        run: |
          KEY=$(az storage account keys list -n "$SA_NAME" -g "$RG_NAME" --query "[0].value" -o tsv)
          echo "::add-mask::$KEY"
          echo "ACKEY=$KEY" >> $GITHUB_ENV

      # 2) Migra o state do landing-zone (local -> azurerm)
      - name: Restore azurerm backend file (landing-zone)
        run: |
          if [ -f landing-zone/backend_remote.bak ]; then mv landing-zone/backend_remote.bak landing-zone/backend.tf; fi

      - name: Migrate landing-zone state to azurerm
        env:
          ARM_ACCESS_KEY: ${{ env.ACKEY }}
        run: |
          terraform -chdir=landing-zone init -reconfigure \
            -backend-config="resource_group_name=${{ env.RG_NAME }}" \
            -backend-config="storage_account_name=${{ env.SA_NAME }}" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=landing.tfstate" \
            -migrate-state -force-copy

      # 3) Migra o tfstate do core-identity (se veio como artefato)
      - name: Migrate core-identity state to azurerm
        if: hashFiles('core-identity/terraform.tfstate') != ''
        env:
          ARM_ACCESS_KEY: ${{ env.ACKEY }}
        run: |
          cd core-identity
          # troca backend local -> azurerm para esta pasta
          if [ -f backend.tf ]; then mv backend.tf backend_local.bak; fi
          printf 'terraform {\n  backend "azurerm" {}\n}\n' > backend.tf
          terraform init -reconfigure \
            -backend-config="resource_group_name=${{ env.RG_NAME }}" \
            -backend-config="storage_account_name=${{ env.SA_NAME }}" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=core.tfstate" \
            -migrate-state -force-copy


