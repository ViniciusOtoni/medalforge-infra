name: databricks-workspace
on:
  workflow_run:
    workflows: ["storage-foundation"]   # dispara quando storage terminar
    types: [completed]

  workflow_dispatch: {}

permissions:
  contents: read
  id-token: write
  actions: read

jobs:
  deploy-dbx:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    env:
      TF_VAR_subscription_id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      TF_VAR_tenant_id:       ${{ secrets.ARM_TENANT_ID }}

    steps:

      - uses: actions/checkout@v4

      # 1) Login com SPN bootstrap (tem Secrets Officer no KV)
      - name: Azure login (bootstrap)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}   # JSON da bootstrap

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      # 2) Capturar credenciais da SPN din√¢mica no AKV
      - name: Fetch dynamic-SPN creds
        id: kv
        run: |
          KV="akv-medalforge-rbac-core"
          ID=$(az keyvault secret show --vault-name $KV --name spn-client-id     -o tsv --query value)
          SC=$(az keyvault secret show --vault-name $KV --name spn-client-secret -o tsv --query value)
          echo "::add-mask::$SC"
          echo "TF_VAR_spn_client_id=$ID"     >> $GITHUB_ENV
          echo "TF_VAR_spn_client_secret=$SC" >> $GITHUB_ENV
          echo "ARM_CLIENT_ID=$ID"            >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=$SC"        >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ env.TF_VAR_subscription_id }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ env.TF_VAR_tenant_id }}"             >> $GITHUB_ENV

      - name: Terraform init
        run: terraform -chdir=databricks-workspace init

      - name: Terraform apply
        run: terraform -chdir=databricks-workspace apply -auto-approve

  # Job 2 ‚Äì pausa para grant manual
  await-account-admin-grant:
    name: "üö¶ Aguardar grant account_admin"
    needs: deploy-dbx
    runs-on: ubuntu-latest
    environment: approval-account-admin
    steps:
      - name: Instru√ß√µes
        run: |
          echo "Abra o Databricks Account Console,"
          echo "atribua a **SPN din√¢mica** como *account_admin*"
          echo "e clique em 'Approve & deploy' para continuar."
  
  # Job 3 ‚Äì configura√ß√µes de Unity Catalog / workspace-config

  workspace-config:
    name: workspace-config
    needs: await-account-admin-grant          # roda s√≥ depois da aprova√ß√£o
    runs-on: ubuntu-latest

    env:
      TF_VAR_subscription_id:        ${{ secrets.ARM_SUBSCRIPTION_ID }}
      TF_VAR_tenant_id:              ${{ secrets.ARM_TENANT_ID }}
      TF_VAR_databricks_account_id:  ${{ secrets.ARM_ACCOUNT_ID }}

    steps:
      - uses: actions/checkout@v4

      # login com SPN bootstrap (pode buscar o KV novamente)
      - name: Azure login (bootstrap)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Captura credenciais da SPN din√¢mica no KV
      - name: Fetch dynamic-SPN creds
        run: |
          KV="akv-medalforge-rbac-core"
          ID=$(az keyvault secret show --vault-name $KV --name spn-client-id     -o tsv --query value)
          SC=$(az keyvault secret show --vault-name $KV --name spn-client-secret -o tsv --query value)
          echo "::add-mask::$SC"
          echo "TF_VAR_spn_client_id=$ID"     >> $GITHUB_ENV
          echo "TF_VAR_spn_client_secret=$SC" >> $GITHUB_ENV

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform init (workspace-config)
        run: terraform -chdir=workspace-config init

      - name: Terraform apply (workspace-config)
        run: terraform -chdir=workspace-config apply -auto-approve
      
 
  # Job 4 ‚Äì Desabilitar a op√ß√£o de Network Watcher na regi√£o BrazilSouth
  cleanup-network-watcher:
    needs: workspace-config        
    runs-on: ubuntu-latest
    
    steps:
      - name: Azure login (bootstrap)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Disable Network Watcher & delete RG
        run: |
          az network watcher configure --enabled false
          az group delete -n NetworkWatcherRG --yes --no-wait || true
