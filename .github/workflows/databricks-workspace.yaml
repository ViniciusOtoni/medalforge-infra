name: databricks-workspace

on:
  workflow_run:
    workflows: ["storage-foundation"] 
    types: [completed]

  workflow_dispatch: {}

permissions:
  contents: read
  id-token: write
  actions: read


# 1. CriaÃ§Ã£o do workspace Databricks + SPN dinÃ¢mica

jobs:
  deploy-dbx:
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event.workflow_run.conclusion == 'success') }}
    runs-on: ubuntu-latest
    env:
      TF_VAR_subscription_id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      TF_VAR_tenant_id:       ${{ secrets.ARM_TENANT_ID }}
    steps:
      - uses: actions/checkout@v4

      - name: Azure login (bootstrap)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}   # JSON da bootstrap
      
      # Instala o Terraform CLI versÃ£o 1.6.6
      - name: Setup Terraform 1.6.6
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      # Busca client_id / secret da SPN dinÃ¢mica no Key Vault
      - name: Fetch dynamic-SPN creds
        id: kv
        run: |
          KV="akv-medalforge-rbac-core"
          SPN_ID=$(az keyvault secret show --vault-name "$KV" --name spn-client-id     -o tsv --query value)
          SPN_SECRET=$(az keyvault secret show --vault-name "$KV" --name spn-client-secret -o tsv --query value)
          echo "::add-mask::$SPN_SECRET"

          # â€” variÃ¡veis TF_ que vÃ£o para o mÃ³dulo
          echo "TF_VAR_spn_client_id=$SPN_ID"        >> $GITHUB_ENV
          echo "TF_VAR_spn_client_secret=$SPN_SECRET" >> $GITHUB_ENV

          # â€” variÃ¡veis ARM_* (backend AzureRM)
          echo "ARM_CLIENT_ID=$SPN_ID"               >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=$SPN_SECRET"       >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=$TF_VAR_subscription_id" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=$TF_VAR_tenant_id"             >> $GITHUB_ENV

          # â€” variÃ¡veis AZURE_* para o provider Databricks
          echo "AZURE_CLIENT_ID=$SPN_ID"             >> $GITHUB_ENV
          echo "AZURE_CLIENT_SECRET=$SPN_SECRET"     >> $GITHUB_ENV
          echo "AZURE_TENANT_ID=$TF_VAR_tenant_id"   >> $GITHUB_ENV
          unset AZURE_FEDERATED_TOKEN_FILE || true   # garante client-secret

      - name: Terraform init (workspace)
        run: terraform -chdir=databricks-workspace init

      - name: Terraform apply (workspace)
        run: terraform -chdir=databricks-workspace apply -auto-approve

  
# 2. Cleanup Network Watcher

  cleanup-network-watcher:
    needs: deploy-dbx
    runs-on: ubuntu-latest
    steps:
      - name: Azure login (bootstrap)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Disable Network Watcher & delete RG
        run: |
          az network watcher configure --locations brazilsouth --enabled false
          az group delete -n NetworkWatcherRG --yes --no-wait || true


# 3. Pausa manual para dar account_admin

  await-account-admin-grant:
    name: "ðŸš¦ Aguardar grant account_admin"
    needs: deploy-dbx
    runs-on: ubuntu-latest
    environment: approval-account-admin
    steps:
      - run: |
          echo "Abra o Databricks Account Console,"
          echo "atribua a SPN dinÃ¢mica como account_admin"
          echo "e clique em 'Approve & deploy' para continuar."

# 4. ConfiguraÃ§Ã£o do Unity Catalog

  workspace-config:
    name: workspace-config
    needs: aad-sync
    runs-on: ubuntu-latest
    env:
      TF_VAR_subscription_id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      TF_VAR_tenant_id:       ${{ secrets.ARM_TENANT_ID }}
      TF_VAR_databricks_account_id: ${{ secrets.ARM_ACCOUNT_ID }}

    steps:
      - uses: actions/checkout@v4

      - name: Azure login (bootstrap)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform 1.6.6
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      # Busca novamente as credenciais da SPN dinÃ¢mica 
      - name: Fetch dynamic-SPN creds (UC)
        id: kv_uc
        run: |
          KV="akv-medalforge-rbac-core"
          SPN_ID=$(az keyvault secret show --vault-name "$KV" --name spn-client-id     -o tsv --query value)
          SPN_SECRET=$(az keyvault secret show --vault-name "$KV" --name spn-client-secret -o tsv --query value)
          echo "::add-mask::$SPN_SECRET"

          # â€” variÃ¡veis TF_ que vÃ£o para o mÃ³dulo
          echo "TF_VAR_spn_client_id=$SPN_ID"         >> $GITHUB_ENV
          echo "TF_VAR_spn_client_secret=$SPN_SECRET" >> $GITHUB_ENV

          # â€” variÃ¡veis ARM_* (backend AzureRM)
          echo "ARM_CLIENT_ID=$SPN_ID"               >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=$SPN_SECRET"       >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=$TF_VAR_subscription_id" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=$TF_VAR_tenant_id"             >> $GITHUB_ENV

          # â€” variÃ¡veis AZURE_* para o provider Databricks
          echo "AZURE_CLIENT_ID=$SPN_ID"             >> $GITHUB_ENV
          echo "AZURE_CLIENT_SECRET=$SPN_SECRET"     >> $GITHUB_ENV
          echo "AZURE_TENANT_ID=$TF_VAR_tenant_id"   >> $GITHUB_ENV
          unset AZURE_FEDERATED_TOKEN_FILE || true

          # Removendo token OIDC
          echo "AZURE_FEDERATED_TOKEN_FILE=" >> $GITHUB_ENV


      - name: Terraform init (UC)
        run: terraform -chdir=workspace-config init -upgrade -reconfigure

      - name: Terraform apply (UC)
        run: terraform -chdir=workspace-config apply -auto-approve


