name: infra-bootstrap

on:
  workflow_call:
    secrets:
      ARM_SUBSCRIPTION_ID:
        required: true
      ARM_TENANT_ID:
        required: true
      ARM_CLIENT_ID:
        required: true
      ARM_CLIENT_SECRET:
        required: true
      ARM_OBJECT_ID:
        required: true
      AZURE_CREDENTIALS:
        required: true
      ARM_ACCOUNT_ID:
        required: true
    outputs:
      workspace_url:
        description: "Databricks workspace URL"
        value: ${{ jobs.capture_outputs.outputs.workspace_url }}
      workspace_id:
        description: "Databricks workspace ID"
        value: ${{ jobs.capture_outputs.outputs.workspace_id }}

permissions:
  contents: read
  id-token: write
  actions: write

jobs:
  core_identity:
    name: Core Identity
    runs-on: ubuntu-latest
    env:
      TF_VAR_subscription_id:     ${{ secrets.ARM_SUBSCRIPTION_ID }}
      TF_VAR_tenant_id:           ${{ secrets.ARM_TENANT_ID }}
      TF_VAR_admin_client_id:     ${{ secrets.ARM_CLIENT_ID }}
      TF_VAR_admin_client_secret: ${{ secrets.ARM_CLIENT_SECRET }}
      TF_VAR_bootstrap_spn_object_id: ${{ secrets.ARM_OBJECT_ID }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ViniciusOtoni/sunny-data
          ref: main

      - name: Azure Login (bootstrap)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform Init (core-identity)
        run: terraform -chdir=core-identity init

      - name: Terraform Apply (core-identity)
        run: terraform -chdir=core-identity apply -auto-approve

      - name: Upload tfstate (core-identity)
        uses: actions/upload-artifact@v4
        with:
          name: tfstate-core
          path: core-identity/terraform.tfstate

  landing_zone:
    name: Landing Zone
    runs-on: ubuntu-latest
    needs: core_identity
    env:
      TF_VAR_subscription_id:     ${{ secrets.ARM_SUBSCRIPTION_ID }}
      TF_VAR_tenant_id:           ${{ secrets.ARM_TENANT_ID }}
      TF_VAR_admin_client_id:     ${{ secrets.ARM_CLIENT_ID }}
      TF_VAR_admin_client_secret: ${{ secrets.ARM_CLIENT_SECRET }}
      SA_NAME: stmedalforgestate
      RG_NAME: rg-medalforge-core
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ViniciusOtoni/sunny-data
          ref: main

      - name: Download core-identity tfstate
        uses: actions/download-artifact@v4
        with:
          name: tfstate-core
          path: core-identity

      - name: Azure Login (bootstrap)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      # 1) Bootstrapping â€“ backend LOCAL no landing-zone
      - name: Switch backend to local temporarily
        run: |
          mv landing-zone/backend.tf landing-zone/backend_remote.bak
          cat <<'EOF' > landing-zone/backend.tf
          terraform {
            backend "local" {}
          }
          EOF

      - name: Terraform init (local)
        run: terraform -chdir=landing-zone init

      - name: Terraform apply (create SA)
        run: terraform -chdir=landing-zone apply -auto-approve

      - name: Capture SA/RG and access key
        id: tfout
        run: |
          SA=$(terraform -chdir=landing-zone output -raw state_sa_name)
          RG=$(terraform -chdir=landing-zone output -raw state_rg_name)
          ACCESS_KEY=$(az storage account keys list --account-name "$SA" --resource-group "$RG" --query "[0].value" -o tsv)
          echo "::add-mask::$ACCESS_KEY"
          echo "sa=$SA"     >> $GITHUB_OUTPUT
          echo "rg=$RG"     >> $GITHUB_OUTPUT
          echo "ackey=$ACCESS_KEY" >> $GITHUB_OUTPUT

      # 2) MigraÃ§Ã£o â€“ backend AZURERM do landing-zone
      - name: Restore azurerm backend file
        run: mv landing-zone/backend_remote.bak landing-zone/backend.tf

      - name: Migrate landing-zone state to azurerm
        env:
          ARM_ACCESS_KEY: ${{ steps.tfout.outputs.ackey }}
        run: |
          terraform -chdir=landing-zone init \
            -backend-config="resource_group_name=${{ steps.tfout.outputs.rg }}" \
            -backend-config="storage_account_name=${{ steps.tfout.outputs.sa }}" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=landing.tfstate" \
            -migrate-state -force-copy

      - name: Migrate core-identity state to azurerm
        env:
          ARM_ACCESS_KEY: ${{ steps.tfout.outputs.ackey }}
        run: |
          cd core-identity
          # troca o backend de local -> azurerm (necessÃ¡rio para migrar)
          if [ -f backend.tf ]; then mv backend.tf backend_local.bak; fi
          cat <<'EOF' > backend.tf
          terraform {
            backend "azurerm" {}
          }
          EOF
          terraform init \
            -backend-config="resource_group_name=${{ steps.tfout.outputs.rg }}" \
            -backend-config="storage_account_name=${{ steps.tfout.outputs.sa }}" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=core.tfstate" \
            -migrate-state -force-copy


  storage_foundation:
    name: Storage Foundation
    runs-on: ubuntu-latest
    needs: landing_zone
    permissions:
      contents: read
      id-token: write
      actions: read
    env:
      TF_VAR_subscription_id:   ${{ secrets.ARM_SUBSCRIPTION_ID }}
      TF_VAR_tenant_id:         ${{ secrets.ARM_TENANT_ID }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ViniciusOtoni/sunny-data
          ref: main

      - name: Azure Login (bootstrap)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Fetch dynamic-SPN creds from Key Vault
        id: kv
        run: |
          KV_NAME="akv-medalforge-rbac-core"
          SPN_ID=$(az keyvault secret show --vault-name $KV_NAME --name spn-client-id --query value -o tsv)
          SPN_SECRET=$(az keyvault secret show --vault-name $KV_NAME --name spn-client-secret --query value -o tsv)
          echo "::add-mask::$SPN_SECRET"
          echo "TF_VAR_spn_client_id=$SPN_ID"         >> $GITHUB_ENV
          echo "TF_VAR_spn_client_secret=$SPN_SECRET" >> $GITHUB_ENV
          echo "ARM_CLIENT_ID=$SPN_ID"                >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=$SPN_SECRET"        >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ env.TF_VAR_subscription_id }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ env.TF_VAR_tenant_id }}"             >> $GITHUB_ENV

      - name: Terraform init (storage-foundation)
        run: terraform -chdir=storage-foundation init

      - name: Terraform apply (storage-foundation)
        run: terraform -chdir=storage-foundation apply -auto-approve

  databricks_workspace:
    name: Databricks Workspace
    runs-on: ubuntu-latest
    needs: storage_foundation
    env:
      TF_VAR_subscription_id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      TF_VAR_tenant_id:       ${{ secrets.ARM_TENANT_ID }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ViniciusOtoni/sunny-data
          ref: main

      - name: Azure login (bootstrap)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Fetch dynamic-SPN creds
        id: kv
        run: |
          KV="akv-medalforge-rbac-core"
          SPN_ID=$(az keyvault secret show --vault-name "$KV" --name spn-client-id     -o tsv --query value)
          SPN_SECRET=$(az keyvault secret show --vault-name "$KV" --name spn-client-secret -o tsv --query value)
          echo "::add-mask::$SPN_SECRET"
          echo "TF_VAR_spn_client_id=$SPN_ID"         >> $GITHUB_ENV
          echo "TF_VAR_spn_client_secret=$SPN_SECRET" >> $GITHUB_ENV
          echo "ARM_CLIENT_ID=$SPN_ID"                >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=$SPN_SECRET"        >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ env.TF_VAR_subscription_id }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ env.TF_VAR_tenant_id }}"             >> $GITHUB_ENV
          echo "AZURE_CLIENT_ID=$SPN_ID"              >> $GITHUB_ENV
          echo "AZURE_CLIENT_SECRET=$SPN_SECRET"      >> $GITHUB_ENV
          echo "AZURE_TENANT_ID=${{ env.TF_VAR_tenant_id }}"          >> $GITHUB_ENV
          unset AZURE_FEDERATED_TOKEN_FILE || true

      - name: Terraform init (databricks-workspace)
        run: terraform -chdir=databricks-workspace init

      - name: Terraform apply (databricks-workspace)
        run: terraform -chdir=databricks-workspace apply -auto-approve

  cleanup_network_watcher:
    name: Cleanup Network Watcher
    needs: databricks_workspace
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ViniciusOtoni/sunny-data
          ref: main

      - name: Azure login (bootstrap)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Disable Network Watcher & delete RG
        run: |
          az network watcher configure --locations brazilsouth --enabled false
          az group delete -n NetworkWatcherRG --yes --no-wait || true

  await_account_admin_grant:
    name: "ðŸš¦ Aguardar grant account_admin"
    needs: databricks_workspace
    runs-on: ubuntu-latest
    environment: approval-account-admin
    steps:
      - run: |
          echo "Abra o Databricks Account Console,"
          echo "atribua a SPN dinÃ¢mica como account_admin"
          echo "e clique em 'Approve & deploy' para continuar."

  workspace_config:
    name: Workspace Config (Unity Catalog)
    needs: await_account_admin_grant
    runs-on: ubuntu-latest
    env:
      TF_VAR_subscription_id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      TF_VAR_tenant_id:       ${{ secrets.ARM_TENANT_ID }}
      TF_VAR_databricks_account_id: ${{ secrets.ARM_ACCOUNT_ID }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ViniciusOtoni/sunny-data
          ref: main

      - name: Azure login (bootstrap)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6
